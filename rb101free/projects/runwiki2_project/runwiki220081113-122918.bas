'runwiki.bas - version 2.0''This application uses the stackObject.bas projectversion$ = "2.0"global siteName$, siteDesc$, siteBannerUrl$siteName$ = "Runwiki v2.0, an open source project"siteDesc$ = "Copyright 2008 Shoptalk Systems.  All rights reserved."siteBannerUrl$ = ""   'for example  /someBanner.jpgglobal databaseDir$, uploadDir$databaseDir$ = DefaultDir$ + osDelimiter$() + "runwiki"uploadDir$ = ResourcesRoot$ + osDelimiter$() + "runwiki"global TRUE, FALSEFALSE = 0TRUE = 1global encryptPasswordsencryptPasswords = FALSEglobal allowRegistrationallowRegistration = FALSEglobal hasComments, acceptCommentshasComments = FALSE' SMTP setup smtpHost$ = ""      'mail.server.comsmtpPassword$ = ""  'password goes herefromAddress$ = ""   'someGuy@emailAddress.comcall setCSSglobal currentName$, currentContent$, #editPage, #wiki, #user, #password, user$, #hide, hideFlagglobal #pageName, pageDeletedglobal inlineTag$, numInlineTagsglobal #blockStack, #tagStack, #htmlStackglobal #commentUserName, #commentEmail, #commentTextdim inlineTag$(50, 3)call createDirectoriescall createDefaultUsercall createHomePagecall createCommentsTablecall loadWikiTagscall createStackscurrentName$ = "HOME"call loadCurrentPagecall displayCurrentPagewaitsub displayCurrentPage  cls  div title    print siteName$    div copyright      print siteDesc$    end div  end div  div navigation    html "<b>Index:</b>" : print    call pageList    print    link #index, "Page Index", [index] : print    print    print "Go to page:"    textbox #pageName, "" : print    button #go, "Go To", [gotoPage]    html "<hr />"    if user$ = "" then      print "Welcome, Visitor"      print "User: "      textbox #user, "" : print      print "Password: "      passwordbox #password, "" : print      button #login, "Log in", [login] : print " ";      if allowRegistration then button #register, "Register", [register]    else      print "Welcome, "; user$      link #logout, "Log out", [logout] : print      link #password, "Change Password", [password] : print      button #register, "Register", [register]    end if  end div  if user$ <> "" then    div pagebar      div right        if pageDeleted then          link #createPage, "Create this page", [recreatePage] : print " | ";        else          link #editPage, "Edit this page", [editPage] : print " | ";          link #deletePage, "Delete this page", [deletePage] : print " | ";        end if        link #upload, "Manage files", [fileManager]      end div      print "This page: "; currentName$;    end div  end if  div page    call renderPage    call renderComments    call renderAddComment  end divend sub[login]  call connect  #wiki execute("select name from users where upper(name) = upper('"; doubleQuote$(#user contents$()); "') and password = '"; doubleQuote$(encrypt$(#password contents$())); "'")  if #wiki hasanswer() then    user$ = #wiki nextrow$("")    call disconnect  else    call disconnect    cls    div notice      print "Login failed.  Bad username or password."      link #retry, "Try again.", [tryAgain]    end div    wait  end if[tryAgain]  call displayCurrentPage  wait[logout]  user$ = ""  call displayCurrentPage  wait[recreatePage]  call createPage currentName$  wait[gotoPage]  pageName$ = #pageName contents$()  if pageName$ <> "" then call loadPage pageName$  waitsub renderPage  content$ = currentContent$  ' Define some constants  StartTag  = 0  EndTag    = 1  StartHTML = 2  EndHTML   = 3  CR$ = chr$(13)  NL$ = chr$(10)  ' Reset stacks  #tagStack initialise()  #blockStack initialise()  #htmlStack initialise()  ' Reset flags  newLineFlag = 1  inTableFlag = 0  ' Start processing  i = 1  while i <= len(content$)    ' Ignore new lines    if mid$(content$, i, 1) = NL$ then goto [skipChar]    ' Things that happen after a new line    if newLineFlag then      newLineFlag = 0      ' New paragraph      if mid$(content$, i, 1) = CR$ then        call unwindBlockStack        html "<p>"        #blockStack push$("</p>")        inTableFlag = 0        newLineFlag = 1        ' Skip any subsequent NL's or CR's to avoid multiple paragraphs        while mid$(content$, i, 1) = CR$ or mid$(content$, i ,1) = NL$          i = i + 1        wend        goto [nextChar]      end if      ' New table or table row      if mid$(content$, i, 1) = "|" or mid$(content$, i, 1) = "^" then        if mid$(content$, i, 1) <> mid$(content$, i + 1, 1) then           if not(inTableFlag) then            call unwindBlockStack            html "<table cellspacing=""0"">"            inTableFlag = 1            #blockStack push$("</table>")          else            call unwindTagStack            html #blockStack pop$()            html #blockStack pop$()          end if          html "<tr>"          #blockStack push$("</tr>")          if mid$(content$, i, 1) = "|" then            html "<td>"            #blockStack push$("</td>")          else            html "<th>"            #blockStack push$("</th>")          end if          goto [skipChar]        end if      end if      ' New list of list item      if mid$(content$, i, 1) = "*" and mid$(content$, i + 1, 1) <> "*" then        if not(inListFlag) then          call unwindBlockStack          html "<ul>"          inListFlag = 1          #blockStack push$("</ul>")        end if        html "<li>"        goto [skipChar]      end if      ' New ordered list or list item      if mid$(content$, i, 1) = "#" and mid$(content$, i + 1, 1) <> "#" then        if not(inOrderListFlag) then          call unwindBlockStack          html "<ol>"          inOrderListFlag = 1          #blockStack push$("</ol>")        end if        html "<li>"        goto [skipChar]      end if      print " ";    end if    ' Carrige Return    if mid$(content$, i, 1) = CR$ then      newLineFlag = 1      goto [skipChar]    end if    ' Table tags    if inTableFlag then      if mid$(content$, i, 1) = "|" or mid$(content$, i, 1) = "^" then        if mid$(content$, i, 1) <> mid$(content$, i + 1, 1) then           call unwindTagStack          html #blockStack pop$()          if mid$(content$, i, 1) = "|" then            html "<td>"            #blockStack push$("</td>")          else            html "<th>"            #blockStack push$("</th>")          end if          goto [skipChar]        end if      end if    end if    ' Inline tags    if #tagStack hasdata() then      ' Check for end tag      endTag$ = #tagStack peek$()      if mid$(content$, i, len(endTag$)) = endTag$ then        #tagStack pop$()        html #htmlStack pop$()        i = i + len(endTag$)        goto [nextChar]      end if    end if    ' Check for start tag    for j = 0 to numInlineTags      tag$ = inlineTag$(j, StartTag)      if mid$(content$, i, len(tag$)) = tag$ then        html inlineTag$(j, StartHTML)        i = i + len(tag$)        ' Push the end tag onto the stack if required        if inlineTag$(j, EndTag) <> "" then          #tagStack push$(inlineTag$(j, EndTag))          #htmlStack push$(inlineTag$(j, EndHTML))        end if        goto [nextChar]      end if    next j    ' Ignore wiki markup %%    if mid$(content$, i, 2) = "%%" then      ' call unwindTagStack      j = instr(content$ + "%%", "%%", i + 2)      text$ = mid$(content$, i + 2, j - i - 2)      i = j + 2      print text$;      goto [nextChar]    end if    ' An image {{url|text}}    if mid$(content$, i, 2) = "{{" then      j = instr(content$, "}}", i + 2)      if j = 0 then goto [processChar]      url$ = mid$(content$, i + 2, j - i - 2)      i = j + 2      ' Check for vertical bar      j = instr(url$, "|")      if j > 0 then        text$ = mid$(url$, j + 1)        url$ = mid$(url$, 1, j - 1)      else        text$ = ""      end if      ' Internal link?      if lower$(mid$(url$, 1, 7)) <> "http://" then url$ = "/wiki/" + url$      ' Image or other file type?      select case lower$(right$(url$, 4))      case ".gif", ".jpg", ".png"        html "<img src="""        print url$;        html """"        if text$ <> "" then          html " title="""          print text$;          html """ alt="""          print text$;          html """"        end if        html " />"      case else        html "<a href="""        print url$;        html """>"        if text$ <> "" then          print text$;        else          print url$;        end if        html "</a>"      end select      goto [nextChar]    end if    ' A link [[url|text]]    if mid$(content$, i, 2) = "[[" then      j = instr(content$, "]]", i + 2)      if j = 0 then goto [processChar]      url$ = mid$(content$, i + 2, j - i - 2)      i = j + 2      ' Check for vertical bar      j = instr(url$, "|")      if j > 0 then        text$ = mid$(url$, j + 1)        url$ = mid$(url$, 1, j - 1)      else        text$ = ""      end if      ' External link?      if lower$(mid$(url$, 1, 7)) = "http://" then        html "<a href="""        print url$;        html """>"        if text$ <> "" then          print text$;        else          print url$;        end if        html "</a>"      else        if pageExists(url$) then          if text$ <> "" then            link #exists, text$, loadPage          else            link #exists, url$, loadPage          end if          #exists setkey(url$)        else          if text$ <> "" then            link #doesntExist, "?" + text$, createPage          else            link #doesntExist, "?" + url$, createPage          end if          #doesntExist cssclass("notexists")          #doesntExist setkey(url$)        end if      end if      goto [nextChar]    end if    ' A bare url http://{url}    if lower$(mid$(content$, i, 7)) = "http://" then      j = min(instr(content$ + " ", " ", i), instr(content$, chr$(13), i))      html "<a href="""      print mid$(content$, i, j - i);      html """>"      print mid$(content$, i, j - i);      html "</a>"      i = j      goto [nextChar]    end if    ' A bare url www.something    if lower$(mid$(content$, i, 4)) = "www." then      j = min(instr(content$ + " ", " ", i), instr(content$, CR$, i))      html "<a href=""http://"      print mid$(content$, i, j - i);      html """>"      print mid$(content$, i, j - i);      html "</a>"      i = j      goto [nextChar]    end if    ' Just output the character    [processsChar]    print mid$(content$, i, 1);    [skipChar]    i = i + 1    [nextChar]  wend  call unwindBlockStack  printend subsub unwindTagStack  while #tagStack hasdata()    #tagStack pop$()    html #htmlStack pop$()  wendend subsub unwindBlockStack  call unwindTagStack  while #blockStack hasdata()    html #blockStack pop$()  wendend subsub createPage name$  if user$ <> "" then    cls    div dialog      html "<h2>Create Page - "; name$; "</h2>"    end div    textarea #editPage, "", 80, 20 : print    button #accept, "Accept", [acceptNew] : print " ";    #accept setkey(name$)    button #cancel, "Cancel", [cancelNew] : print " ";    checkbox #hide, "Don't show in page menu ", 0 : print "  ";    checkbox #allowComments, "Allow comments", 0  else    call loadPage name$  end ifend subsub loadPage name$  currentName$ = name$  call loadCurrentPage  call displayCurrentPageend sub[acceptNew]  newContent$ = #editPage contents$()  call connect  #wiki execute("insert into pages (name, content, date, time, hide, user) values ('"; doubleQuote$(EventKey$); "','"; doubleQuote$(newContent$); "',"; date$("days"); ","; time$("seconds"); ","; #hide value(); ",'"; doubleQuote$(user$); "')")  call disconnect  currentName$ = EventKey$  currentContent$ = newContent$  hideFlag = #hide value()  pageDeleted = 0[cancelNew]  call displayCurrentPage  waitfunction pageExists(name$)  call connect  #wiki execute("select * from pages where upper(name) = upper('"; doubleQuote$(name$); "')")  pageExists = #wiki hasAnswer()  call disconnectend function[editPage]  cls  div dialog    html "<h2>Edit page - "; currentName$; "</h2>"  end div    textarea #area, currentContent$, 80, 20 : print  button #acceptEdit, "Accept", [acceptEdit] : print " ";  button #cancelEdit, "Cancel", [cancelEdit] : print " ";  checkbox #hide, "Don't show in page menu ", hideFlag : print "  ";  checkbox #acceptComments, "Allow comments", acceptComments  wait[acceptEdit]  newContent$ = #area contents$()  hideFlag = #hide value()  acceptComments = #acceptComments value()  query$ = "update pages set content = '"; doubleQuote$(newContent$); "',hide = "; hideFlag; ",user= '"; doubleQuote$(user$); "', acceptComments="; acceptComments; " where upper(name) = upper('"; doubleQuote$(currentName$); "')"  call execute query$  currentContent$ = newContent$[cancelEdit]  call displayCurrentPage  wait[deletePage]  cls  div notice    html "<h2>Delete page - "; currentName$; "</h2>"    print "Are you sure that you want to delete this page?"    print "This action can not be undone."    print    button #acceptDelete, "Accept", [acceptDelete] : print " ";    button #cancelDelete, "Cancel", [cancelDelete]  end div  wait[acceptDelete]  query$ = "delete from pages where upper(name) = upper('"; doubleQuote$(currentName$); "')"  call execute query$  currentContent$ = "Page named " + currentName$ + " has been deleted."  pageDeleted = 1[cancelDelete]  call displayCurrentPage  wait[register]  cls  div dialog    html "<h2>New User Registration</h2>"    print "Fill out the following form to register. Your wiki password will be emailed to the address given." : print    print "User: ";    textbox #user, "" : print    print "Email: ";    textbox #email, "" : print    button #acceptUser, "Accept", [acceptRegister] : print " ";    button #cancelUser, "Cancel", [returnToWiki]  end div  wait[acceptRegister]  newUser$ = #user contents$()  newEmail$ = #email contents$()  if newUser$ = "" then     errorMessage$ = "You must enter a user name."    goto [registrationError]  end if  if newEmail$ = "" then    errorMessage$ = "You must enter an email address."    goto [registrationError]  end if  if userExists(newUser$) then    errorMessage$ = "Sorry, the user name " + newUser$ + " has already been used. Please choose a different name."    goto [registrationError]  end if  if emailExists(newEmail$) then    errorMessage$ = "Sorry, the email address " + newEmail$ + " has already been registered by another user and cannot be reused."    goto [registrationError]  end if  newPassword$ = randomPassword$()  query$ = "insert into users (name, password, email) values ('"; doubleQuote$(newUser$); "','"; doubleQuote$(encrypt$(newPassword$)); "','"; doubleQuote$(newEmail$); "')"  call execute query$  ' Send registration email  message$ = "Thanks for registering. Your user name is " + newUser$ + " and your password is " + newPassword$  smtpsender #smtp, smtpHost$  #smtp password(smtpPassword$)  #smtp send(fromAddress$, newEmail$, "Wiki Registration", message$)  cls  div dialog    html "<h2>Registration Successful</h2>"    print "An email has been sent to "; newEmail$; " containing your wiki password."    link #continue, "Return to the wiki", [returnToWiki]  end div  wait[registrationError]  cls  div notice    print errorMessage$    print    button #retry, "Retry", [register] : print " ";    button #cancel, "Cancel", [returnToWiki]  end div  wait[password]  cls  div dialog    html "<h2>Change Password</h2>"    print "Old password: ";    passwordbox #oldPassword, "" : print    print "New Password: ";    passwordbox #newPassword, "" : print    print "Repeat New Password: ";    passwordbox #repeatPassword, "" : print    print    button #acceptPassword, "Accept", [acceptPassword] : print " ";    button #cancelPassword, "Cancel", [returnToWiki]  end div  wait[acceptPassword]  call connect  #wiki execute("select * from users where upper(name) = upper('"; doubleQuote$(user$); "') and password = '"; doubleQuote$(encrypt$(#oldPassword contents$())); "'")  if not(#wiki hasanswer()) then    call disconnect    errorMessage$ = "Old password is incorrect."    goto [badPassword]  end if  call disconnect  if #newPassword contents$() <> #repeatPassword contents$() then    errorMessage$ = "New password and Repeat new password do not match."    goto [badPassword]  end if  query$ = "update users set password = '"; doubleQuote$(encrypt$(#newPassword contents$())); "' where upper(name) = upper('"; doubleQuote$(user$); "')"  call execute query$  cls  div dialog    html "<h2>Password Changed</h2>"    print "Your password has been changed."    link #continue, "Return to the wiki.", [returnToWiki]  end div  wait    [badPassword]  cls  div notice    print "Password change failed. "; errorMessage$    button #retry, "Retry", [password] : print " ";    button #cancel, "Cancel", [returnToWiki]  end div  wait[fileManager]  cls  div dialog    html "<h2>File Manager</h2>"  end div  div filelist    link #return, "Return to wiki", [returnToWiki] : print    print    ' list files    files #f, uploadDir$ + "\*.*"    if #f hasanswer() then      html "<table border=""0""><tr><th>Filename</th><th>Size</th><th>Date</th><th>Preview</th><th>Action</th></tr>"      for i = 1 to #f rowcount()        #f nextfile$()        file$ = #f name$()        if lower$(file$) <> "thumbs.db" then          html "<tr><td>"          print #f name$();          html "</td><td>"          print #f size();          html "</td><td>"          print #f date$(); " "; #f time$();          html "</td><td>"          select case lower$(right$(#f name$(), 4))          case ".gif", ".jpg", ".png"            html "<img src=""/wiki/"            print #f name$();            html """ height=32>"          end select          html "</td><td>"          button #delete, "Delete File", [deleteFile]          #delete setkey(#f name$())          html "</td></tr>"        end if      next i      html "</table>"    else      print "No files found."    end if  end div  print  upload "Select file to upload: "; file$  if file$ = "" then goto [fileManager]  open file$ for binary as #bfile  filedata$ = input$(#bfile, LOF(#bfile))  close #bfile   'open new file with same name in uploads folder  open uploadDir$ + "\" + file$ for binary as #bfile  'write data to new file  print #bfile, filedata$;  close #bfile   'delete uploaded file from root directory  kill file$  goto [fileManager][deleteFile]  file$ = EventKey$  cls  div notice    html "<h2>Delete file - "; file$; "</h2>"    print "Are you sure that you want to delete this file?"    print "This action can not be undone."    print    button #acceptDelete, "Accept", [acceptFileDelete] : print " ";    button #cancelDelete, "Cancel", [cancelFileDelete]  end div  wait[acceptFileDelete]  kill uploadDir$ + "\" + file$[cancelFileDelete]  goto [fileManager][index]  cls  div dialog    html "<h2>Page Index</h2>"  end div  div index    call pageIndex  end div  wait[returnToWiki]  call displayCurrentPage  waitfunction userExists(name$)  call connect  #wiki execute("select * from users where upper(name) = upper('"; doubleQuote$(name$); "')")  userExists = #wiki hasAnswer()  call disconnectend functionfunction emailExists(email$)  call connect  #wiki execute("select * from users where upper(email) = upper('"; doubleQuote$(email$); "')")  emailExists = #wiki hasAnswer()  call disconnectend functionfunction randomPassword$()  l = rnd(1) * 4 + 6  for i = 1 to l    randomPassword$ = randomPassword$ + chr$(rnd(1) * 26 + 65)  next iend functionsub loadCurrentPage  call connect    #wiki execute("select hide, content, acceptComments from pages where upper(name) = upper('"; doubleQuote$(currentName$); "')")    if #wiki hasAnswer() then      #row = #wiki #nextrow()      hideFlag = #row hide()      currentContent$ = #row content$()      acceptComments = #row acceptComments()      pageDeleted = 0    else      currentContent$ = "Page named "; currentName$; " does not exist."      acceptComments = 0      pageDeleted = 1    end if  call disconnectend subsub pageList  call connect    #wiki execute("select name from pages where hide isnull or hide = 0 order by case when upper(name) = 'HOME' then 0 else 1 end, upper(name)")    if #wiki hasAnswer() then      for i = 1 to #wiki rowcount()        pageName$ = #wiki nextRow$("")        link #exists, pageName$, loadPage        #exists setkey(pageName$)        print      next i    end if  call disconnectend subsub pageIndex  letter$ = ""  call connect    #wiki execute("select name from pages order by upper(name)")    if #wiki hasAnswer() then      for i = 1 to #wiki rowcount()        pageName$ = #wiki nextRow$("")        if letter$ <> upper$(left$(pageName$, 1)) then          letter$ = upper$(left$(pageName$, 1))          print          html "<u>"; letter$; "</u>"          print : print        end if        link #exists, pageName$, loadPage        #exists setkey(pageName$)        print      next i    end if  call disconnectend subsub createDefaultUser  call connect  #wiki execute("select * from sqlite_master where name = 'users' and type='table'")  if not(#wiki hasanswer()) then    #wiki execute("create table users(name text, password text, email text)")    #wiki execute("insert into users (name, password) values ('admin','" + encrypt$("password") + "')")  end if  call disconnectend subsub createHomePage  call connect  #wiki execute("select * from sqlite_master where name = 'pages' and type='table'")  if not(#wiki hasanswer()) then    #wiki execute("create table pages (name text, content text, date int, time int, hide int, user text, acceptComments int)")    content$ = "This is your initial home page for Run Wiki.  Please edit this and make it your own."    #wiki execute("insert into pages (name, content, date, time, acceptComments) values ('Home','"; doubleQuote$(content$); "', "; date$("days"); ","; time$("seconds"); ", 0)")  end if  call disconnectend subsub createCommentsTable  call connect  #wiki execute("select * from sqlite_master where name = 'comments' and type='table'")  if not(#wiki hasanswer()) then    #wiki execute("create table comments (pageName text, name text, email text, comment text, date text, time text, id int, approval text)")  end if  call disconnectend subsub createDirectories  files #dir, databaseDir$  if not(#dir hasanswer()) then    a = mkdir(databaseDir$)  end if  files #dir, uploadDir$  if not(#dir hasanswer()) then    a = mkdir(uploadDir$)  end ifend subsub connect  sqliteconnect #wiki, databaseDir$ + osDelimiter$() + "wiki2.db"end subfunction osDelimiter$()  osDelimiter$ = "/"  if Platform$ = "win32" then osDelimiter$ = "\"end functionsub disconnect  #wiki disconnect()end subsub execute sqlStatement$  call connect  #wiki execute(sqlStatement$)  call disconnectend subfunction doubleQuote$(string$)  if instr(string$, "'") then    for x = 1 to len(string$)      if mid$(string$, x, 1) = "'" then doubleQuote$ = doubleQuote$ + "'"      doubleQuote$ = doubleQuote$ + mid$(string$, x, 1)    next x  else    doubleQuote$ = string$  end ifend functionsub loadWikiTags  numInlineTags = 23  for i = 0 to numInlineTags    for j = 0 to 3      read inlineTag$(i, j)    next j  next i  ' Inline tags data  data "======", "======", "<h1>"    , "</h1>"  data "=====" , "=====" , "<h2>"    , "</h2>"  data "===="  , "===="  , "<h3>"    , "</h3>"  data "==="   , "==="   , "<h4>"    , "</h4>"  data "=="    , "=="    , "<h5>"    , "</h5>"  data "**"    , "**"    , "<b>"     , "</b>"  data "//"    , "//"    , "<i>"     , "</i>"  data "__"    , "__"    , "<u>"     , "</u>"  data "^^"    , "^^"    , "<sup>"   , "</sup>"  data ",,"    , ",,"    , "<sub>"   , "</sub>"  data "'"     , "'"     , "<tt>"  , "</tt>"  data "----"  , ""      , "<hr />"  , ""  data "++"    , "++"    , "<big>"   , "</big>"  data "--"    , "--"    , "<small>" , "</small>"  data "\\"    , ""      , "<br />"  , ""  data "(c)"   , ""      , "&copy;"  , ""  data "(tm)"  , ""      , "&trade;" , ""  data "(r)"   , ""      , "&reg;"   , ""  data "<->"   , ""      , "&harr;"  , ""  data "<=>"   , ""      , "&hArr;"  , ""  data "->"    , ""      , "&rarr;"  , ""  data "<-"    , ""      , "&larr;"  , ""  data "=>"    , ""      , "&rArr;"  , ""  data "<="    , ""      , "&lArr;"  , ""end subsub createStacks  run "stackObject.bas", #blockStack  run "stackObject.bas", #tagStack  run "stackObject.bas", #htmlStackend subfunction encrypt$(encryptThis$)  if encryptPasswords then    encrypt$ = doEncrypt$(encryptThis$)  else    encrypt$ = encryptThis$  end ifend functionfunction doEncrypt$(M$)  N = len(M$)  ' Step 1. Append padding bytes  ' ----------------------------  r = 16 - (N mod 16)  if r = 0 then r = 16  for i = 0 to r - 1    M$ = M$ + chr$(r)  next i  N = N + r  ' Step 2. Append Checksums  ' ------------------------  ' Load S  dim S(255)  restore  for i = 0 to 255    read S(i)  next i  ' Clear checksum  dim C(15)  L = 0  ' Process each 16 byte block  for i = 0 to N / 16 - 1    ' Checksum block i    for j = 0 to 15      c = asc(mid$(M$, i * 16 + j + 1, 1))      C(j) = C(j) xor S(c xor L)      L = C(j)    next j  next i  for i = 0 to 15    M$ = M$ + chr$(C(i))  next i  N = N + 16  ' Step 3. Initialise the MD Buffer  ' --------------------------------  dim X(47)  ' Step 4. Process Message in 16-Byte Blocks  ' -----------------------------------------  for i = 0 to N / 16 - 1    ' Copy block i into X    for j = 0 to 15      X(16 + j) = asc(mid$(M$, i * 16 + j + 1, 1))      X(32 + j) = X(16 + j) xor X(j)    next j    t = 0    ' Do 18 rounds    for j = 0 to 17      ' Round j       for k = 0 to 47        t = X(k) xor S(t)        X(k) = t      next k      t = (t + j) mod 256    next j  next i  ' Step 5. Output  ' --------------  X$ = ""  for i = 0 to 15     X$ = X$ + right$("0" + dechex$(X(i)), 2)  next i  doEncrypt$ = X$  data 41, 46, 67, 201, 162, 216, 124, 1, 61, 54, 84, 161, 236, 240, 6  data 19, 98, 167, 5, 243, 192, 199, 115, 140, 152, 147, 43, 217, 188  data 76, 130, 202, 30, 155, 87, 60, 253, 212, 224, 22, 103, 66, 111, 24  data 138, 23, 229, 18, 190, 78, 196, 214, 218, 158, 222, 73, 160, 251  data 245, 142, 187, 47, 238, 122, 169, 104, 121, 145, 21, 178, 7, 63  data 148, 194, 16, 137, 11, 34, 95, 33, 128, 127, 93, 154, 90, 144, 50  data 39, 53, 62, 204, 231, 191, 247, 151, 3, 255, 25, 48, 179, 72, 165  data 181, 209, 215, 94, 146, 42, 172, 86, 170, 198, 79, 184, 56, 210  data 150, 164, 125, 182, 118, 252, 107, 226, 156, 116, 4, 241, 69, 157  data 112, 89, 100, 113, 135, 32, 134, 91, 207, 101, 230, 45, 168, 2, 27  data 96, 37, 173, 174, 176, 185, 246, 28, 70, 97, 105, 52, 64, 126, 15  data 85, 71, 163, 35, 221, 81, 175, 58, 195, 92, 249, 206, 186, 197  data 234, 38, 44, 83, 13, 110, 133, 40, 132, 9, 211, 223, 205, 244, 65  data 129, 77, 82, 106, 220, 55, 200, 108, 193, 171, 250, 36, 225, 123  data 8, 12, 189, 177, 74, 120, 136, 149, 139, 227, 99, 232, 109, 233  data 203, 213, 254, 59, 0, 29, 57, 242, 239, 183, 14, 102, 88, 208, 228  data 166, 119, 114, 248, 235, 117, 75, 10, 49, 68, 80, 180, 143, 237  data 31, 26, 219, 153, 141, 51, 159, 17, 131, 20end functionsub renderComments  call connect  query$ = "select * from comments where pageName = '"+currentName$+"' and approval='APPROVED'"  if user$ <> "" then query$ = "select * from comments where pageName = '"+currentName$+"' and approval<>'DISAPPROVED'"  #wiki execute(query$)  if #wiki hasAnswer() then    print    div comments      html "<b>Comments:</b>" : print      for x = 1 to #wiki rowcount()        #row = #wiki #nextrow()        if user$ <> "" and #row approval$() <> "APPROVED" then          link #approve, "Approve", approve          #approve setkey(#row id$())          print " ";          link #disapprove, "Disapprove", disapprove          #disapprove setkey(#row id$())          print " ";        end if        html "<i>"; #row name$(); " - "; #row date$(); ", "; #row time$(); "</i>"        print        print #row comment$()        print      next x    end div  end if  call disconnectend subsub approve key$  call connect  #wiki execute("update comments set approval = 'APPROVED' where id = '"+key$+"'")  call disconnect  call displayCurrentPageend subsub disapprove key$  call connect  #wiki execute("update comments set approval = 'DISAPPROVED' where id = '"+key$+"'")  call disconnect  call displayCurrentPageend sub  sub renderAddComment  if acceptComments then    print    div addComment      html "<b>Add a comment</b>"      print      textbox #commentUserName, "", 15      print " Your name"      textbox #commentEmail, "", 15      print " Your email address (required but not made public)"      print "Comment text"      textarea #commentText, ""      button #submitComment, "Submit", submitComment    end div  end ifend subsub submitComment key$  call addComment currentName$, _    #commentUserName contents$(), _    #commentEmail contents$(), _    #commentText contents$()  call displayCurrentPageend subsub addComment pageName$, userName$, email$, commentText$  call connect    #wiki execute("select count(*) from comments")    index = val(#wiki nextRow$("")) + 1    statement$ = "insert into comments (pageName, name, email, comment, date, time, id, approval) values ('"+doubleQuote$(pageName$)+"','"+doubleQuote$(userName$)+"','"+doubleQuote$(email$)+"','"+doubleQuote$(commentText$)+"','"+date$()+"','"+time$()+"',"+str$(index)+",'NONE')"    #wiki execute(statement$)  call disconnectend subsub setCSS  cssid #title, "{ font-family: Tahoma; font-size: 20pt; font-weight: bold; background: #FFF; border-bottom: 3px solid #666666; padding: 3px; background-repeat: no-repeat; background-image: url('"+siteBannerUrl$+"') ; height: 80px}"  cssid #copyright, "{ font-size: 10pt }"  cssid #navigation, "{font-family: Tahoma; font-size: small; padding: 4px; width: 160px; float: left; white-space: normal;  background-repeat: repeat; background-image: url('/pagebg.PNG'); }"  cssid #pagebar, "{ font-family: Arial,sans-serif; font-size: small; background: #F5DEB3; border-bottom: 1px solid #898; padding:  4px 4px 4px 8px; margin-left: 160px; }"  cssid #page, "{ font-family: Arial,sans-serif; font-size: small; padding: 4px 4px 4px 8px; margin-left: 170px; white-space: normal; }"  cssid #comments, "{ font-family: Arial,sans-serif; font-size: smaller; padding: 8px 8px 8px 12px; white-space: normal; border-bottom: #DDD 1px solid; border-bottom: #DDD 1px solid; width: 500px; background: #EEE; }"  cssid #dialog, "{ font-family: Tahoma; font-size: small; background: #CFC; border-bottom: 1px solid #898; padding: 8px; }"  cssid #notice, "{ font-family: Tahoma; font-size: small; background: #FF9999; border-bottom: 1px solid #CC3333; padding: 8px; }"  cssid #index, "{font-family: Tahoma; font-size: small; padding: 4px; }"  cssid #filelist, "{font-family: Tahoma; font-size: small; padding: 4px; }"  cssid #right, "{  float: right; }"  cssclass "a.notexists", "{ color: red; }"  cssclass "table", "{ border: 1px solid #666666; border-collapse: collapse; }"  cssclass "td", "{ border: 1px solid #666666; padding: 4px; }"  cssclass "th", "{ border: 1px solid #666666; background: #CFC; padding: 4px; }"end sub